
---
title: Week 3 - Scoping for the love of loops.
jupyter: python3
---

# Welcome Back!

- Hope you had a good break.
- Today, we're diving into `loops`, `python modules`, and `scope`.
- But first, let's quickly recap what we did last week.

## Recap: Strings Operations (1/3)

- Last week, we did a lot of stuff with strings, like combining them (`concatenation`):

```{python}
a = 'Hello'  # assigning a string to a variable
b = 'World'  # assigning a string to a variable

print(a + b)  # concatenating the 2 strings
print(a + ' ' + b + '!')  # adding a space and an exclamation to make the strings print in a more human readable way
```

- We multiplied them (`replication`):

```{python}
# remember that we can only multiply strings by ints, not floats
print(a * 8)  # getting python to print 'Hello' 8 times
```

- And we learned an easy and powerful way to format strings (`f-strings`):

```{python}
c = 'me'  # assigning a string to a variable

d = f"{a}, is it {c} you're looking for?"  # assigning a formatted string to a variable, the f-string includes the variables a and c

print(d)
```

## Practical Exercise

- The `f` and the `{}` in `f-strings` let you run python within a sentence of human-readable text. This is powerful for writing results sections.

```{python}
from statistics import mean, stdev  # ignore this for now

scores = [7, 4, 6, 3, 7, 7, 4, 3, 3, 2, 1, 1, 1, 6, 7, 8, 8, 5, 4]  # imagine this is a column in a data set

# now check out this magic
print(f'The participant scores range from {min(scores)} to {max(scores)} (M = {round(mean(scores),2)}, SD = {round(stdev(scores),2)}).')
```

**See?!?** Unless you really love copying and pasting numbers from SPSS output into Word documents, that collection of code should be really interesting to you.

## Brief Recap of Functions

- Functions help us organize and reuse code.
- Basic syntax:

```{python}
def greet(name):
    return f"Hello, {name}!"

print(greet("world"))
```

- `def` keyword defines a function.
- `name` is a placeholder variable.

## Introducing Loops

- **For Loop**:

```{python}
for i in range(5):
    print(i)
```

- Iterates through a sequence of numbers from 0 to 4.

- **While Loop**:

```{python}
x = 0
while x < 5:
    print(x)
    x += 1
```

- Continues to loop while the condition `x < 5` is true.

## Python Modules

- Modules are collections of functions and variables.
- Importing and using a module:

```{python}
import math

print(math.sqrt(16))
```

## Scope

- Scope determines the visibility of variables.
- Local vs. Global Scope:

```{python}
x = "global"

def my_func():
    x = "local"
    print("Inside function:", x)

my_func()
print("Outside function:", x)
```

- `x` inside the function is local, while `x` outside is global.

# Practice Time

- Try writing your own loops and functions.
- Experiment with importing different modules and using their functions.
- Play around with variable scope and see what happens.
