---
title: "Session 0.0"
subtitle: Introductions all round
---


# Welcome!

My name is Kev O Malley, and I'm the nerd who'll be accompanying you through this material.

<div align="center">
  <img src="images/rain_hill.jpg" alt="description of image" height="500px"/>
</div>


## Acknowledgements{.smaller}
 -
This content is inspired:

- [The python crash course](https://nostarch.com/python-crash-course-3rd-edition) [@MatthesPython2022]
- [Pandas for everyone](https://www.apress.com/gp/book/9781484259618) [@chen2017pandas]
    - There's a second edition of this, I haven't read it, but I'm sure it's great!
- [Harvard's CS50](https://cs50.harvard.edu/x/2022/) [@CS50Scratch2020]
    - This is free online and it's genuinely excellent, they also have intros to python and r which will go deeper than this course.
    - If you went and did either of those courses after doing this you'd be *away-in-a-hack*.
- A deep and abiding hatred of SPSS and MS Word (excel is great though, don't @ me)



## In this session, we're going to:
 -  Introduce you to the foundational tools you will use for writing in this summer school:
    -  VScode (for writing your documents and handling files/folders)
    -  Quarto (to handle formatting of your documents, headings, references)
  -  Not Write Code! (That's tomorrow, once you're more comfortable)


# But first...

Let's address the elephant(s) in the room.

# Elephant 1: Stereotypes{.smaller}


When you think of people who work with computer programming, you may think of people that look like this...

. . .

<div align="center">
  <img src="images/Dexter.jpg" alt="description of image" height="200px"/>
</div>


---

Or maybe like this


<div align="center">
  <img src="images/Kev aged 17.jpg" alt="description of image" height="500px"/>
</div>


## But in reality...{.smaller}

These tools were developed by, and are used by, people from all walks of life

![](images/Grace_Hopper_Team.jpg){fig-align="center" width="500"}

 - The diversity in the human family should be the cause of love and harmony, as it is in music where many different notes blend together in the making of a perfect chord.
[@abdulbaha1938advent]


# Elephant 2: Expectations{.smaller}

You're very smart, but...

 - You're here to **learn**. 
 - Not to be an expert. 
 - So relax and enjoy the process of learning. 

- '...Regard [humanity] as a mine rich in gems of inestimable value. Education can, alone, cause it to reveal its treasures, and enable mankind to benefit therefrom.'
[@bahai_maqsud]


# Elephant 3: But I'm faster with SPSS!{.smaller}

 - You have, at this stage *years* of experience with SPSS and word. 
 - You've (through blood sweat and tears) become very good with it. 
 - So right now, what takes you 5 minutes in SPSS will take you 20 minutes in code.
    - because you're *learning*
 - But the thing is, once you spend the 20 minutes writing code, you'll be able to do the same thing in *0.5 seconds* next time.

. . . 

 "We are what we *repeatedly do*. Excellence, therefore, is not an act, but a _**habit**_.”
[@durant1933story, paraphrasing Aristotle]

# Let me show you 

::: notes
Have the ethics material documentation example ready to go
:::

# A New Way of Working{.smaller}

## From Caves to Code{.smaller}

For most of human history, we’ve been trying to capture information shareable form.

- **Caves** were good—but hard to carry.
  ![](images/cave.jpg){fig-align="center" height=100}

- **Scrolls** were elegant—but fragile.
  ![](images/scroll.jpg){fig-align="center" height=100}

- **Manuscripts** were beautiful—but time-consuming.
  ![](images/manuscript.jpeg){fig-align="center" height=100}

---

- **Printed books** were powerful—but required experts.
  ![](images/press.jpg){fig-align="center" height=100}

- **Word processors** made it easier—but brought new complexity.
  ![](images/word.jpg){fig-align="center" height=100}

- **The web** let us publish anything—but formatting it well became a whole new skill.
  ![](images/browser.jpg){fig-align="center" height=100}

## And now...{.smaller}

There's tools like:

- **Markdown & Quarto** to focus on writing, not formatting.
- **VS Code** to write and manage documents and code in one place.
- **Version control** to collaborate without the chaos of 17 email attachments.

![](images/brent.jpg){fig-align="center" height=250}

Let the machine do the grunt work. You focus on thinking.


# Why Code at All?

## Clicking = Coding (just badly)

Every time you click a button, you're triggering code. But if you’re repeating the same clicks over and over… you’re manually doing something a computer could automate.

## Code = Repeatable Thinking

- You write the instructions once.
- The machine does the boring part.
- You save time and reduce mistakes.

## You Don’t Have to Start from Scratch

There’s code out there already—libraries, templates, helpers. Quarto sets your headings. Python reads your data. Let them help.

## This is About Control

When you know how to code—even a little—you’re not at the mercy of fiddly menus or software quirks. You’re in charge.

You have a limited number of heartbeats. Don’t waste them clicking the same button 37 times.

# OK Kev... Get on with it!

## So, what are we going to be doing? {.smaller}

- **Day 0: Introductions all round**  
  Getting comfortable with VS Code and Quarto, writing markdown, and learning how to structure documents. No code today—just writing.

- **Day 1: Python Basics**  
  Introducing variables, data types, simple operations, and running code in notebooks. Building comfort with running and editing cells. (You'll learn why it's called `Day 0`)

- **Day 2: Working with Data**  
  Introduction to `pandas` and basic data wrangling. Reading in datasets, filtering, grouping, summarising, and visualising.

- **Day 3: Analysis + Reporting Workflow**  
  Combining analysis with Quarto: writing a short methods section, rendering tables and figures, citing sources, and thinking about reproducibility.

- **Day 4: Mini-Project Day**  
  You’ll set up a self-contained analysis notebook or report. Focus on practice, peer feedback, and bringing it all together (Quarto + Python + narrative).

## How are we going to do it? {.smaller}
 - Working together in teams.
    - Supporting each other and learning from each other. 
 - Learning by doing.
    - Writing notes *in the tools we're teaching*
 - Taking low-stakes quizzes.
    - practicing recall and application of concepts.

. . .

Let's get you started by introducing you to vscode.

## Visual Studio Code

-   An IDE (integrated development environment) is a program that allows you to write, run, and debug code all in one place.
    - It 'integrates' all the tools you need to write code into one program.
-   But code is just a form of text, and so an IDE is also a text editor (with notions!).
    -   It allows you to write and edit text, and then, where appropriate, run that text as code, or run code on that text (I made this very presentation in VScode!).

## Visual Studio Code

-   Visual Studio Code (VS Code) is a free, open-source code editor developed by Microsoft.
-   It is available for Windows, macOS, and Linux.
-   It is highly customisable and has a large number of extensions available to add functionality.
    - For example, it has extensions that allow you to view excel style data sets *in the same program* as the document you're writing text in!
    - So no more switching between excel and word (unless... you want to... you do you).

## Visual Studio Code

Open up VS Code and let's take a look around (Don't panic!).

![](images/VSCODEoverview.png){fig-align="center" height=500}

## Visual Studio Code{.smaller}

![](images/VSCODEexplorer%20highlighted.jpg){fig-align="center" height=500}

## Visual Studio Code{.smaller}

-   The left-hand side of the window is the **activity bar**.
    -   It contains icons for the different views and panels in VS Code.
    -  You can click on these icons to switch between views.
    -  The main one you'll use is the 'explorer' icon, top of the activity bar, which will show you the files and folders in your project.



## Visual Studio Code{.smaller}

![](images/VSCODEexplorer_terminal_highlighted.jpg){fig-align="center" height=500}


## Visual Studio Code{.smaller}

 -  The bottom panel is the **terminal**.
    -   This is where you can run commands and see the output of those commands.
    -   You can also run your code here.
    -   You can open the terminal by clicking on the 'terminal' icon in the bar along the top of the VScode window.



## Visual Studio Code{.smaller}

![](images/VSCODEhighlighted.jpg){fig-align="center" height=500}


## Visual Studio Code{.smaller}

 -  The largest panel is the **editor**.
    -   This is where you write your code and text.
    -   But it's also like a browser, you can have multiple tabs open at once, and different types of files
    -   You can split the editor into multiple panes to allow for previews, to view your data while you work, or even compare different parts of the same document! 

## Visual Studio Code

OK so that's the basic layout of VScode, but there's a lot more to it than that, and we'll be exploring it as we go along.
For the next little while we're just going to focus on the editor (cause that's where you'll be spending most of your time), with just a little bit about the explorer and the terminal.

Open up VS Code and lets jump in. 

::: {.notes}
Show people how to open VScode, and walk them through the process of opening for the first time. 
They need to go to 'C:\Users\Public\PSS 2025' right click and then 'open with code'.
Don't forget the 'welcome' screen, and some of the choices they'll make. Give some time here. 
:::


## Visual Studio Code {.smaller }
To open VScode you can either:

 -   Click on the icon on your desktop or in your start menu.
 -   Press the windows key and type 'vscode' or 'code' and press enter.
     - On a mac, you can press `cmd+space` and type 'vscode' and press enter.
 -  Or you can right click on the 'PSS 2025' folder in the address 'C:\\Users\\Public\\' and select 'open with code'.
 -  This is the one I want you to do. 


:::{.notes}
Mention that we've installed vscode for them, and the other stuff we've installed (quarto, python, git, and r).
:::

## Visual Studio Code{.smaller}
![](images/VSCODEwelcome.jpg){fig-align="center" height=450}

When you open VScode for the first time, you'll see a welcome screen, this gives you some options for how you want VScode to look and feel, and some options for what you want to do with it.


## Visual Studio Code{.smaller}

![](images/VSCODEwelcome.jpg){fig-align="center" height=450} 

-   You can choose a theme (light or dark).
-   You can choose a colour scheme.
-   You can choose a font.

## Visual Studio Code{.smaller}

Do these choices matter? Not really so don't stress. They are aesthetic choices, and you can change them at any time, but they're there because you'll be spending a lot of time in VScode and you should be comforatble there. 

 - Take some time and look around the screen, I'll be walking around to make sure that you see everything.
 - Try out the different themes, and see what you like. 
 - When you're ready click on the little blue 'welcome' button in the top left of the window to move on. 

## Visual Studio Code{.smaller}
OK, when you've selected a theme, and clicked on the 'welcome' button you'll see a different welcome screen.
Click on the 'file' button in the top left of the window, and then click on 'open folder'.

![](images/VSCODEopenfolder.jpg){fig-align="right" height=500}
![](images/VSCODEwelcome_after_theme.jpg){fig-align="left" height=500}

::: {.notes}
Point out the two options but focus on the 'file' button and the 'open folder' option because it'll be more common. 
:::

## Visual Studio Code{.smaller}

On the computer you're using there is a folder called 'PSS 2024' at the address: 

### "C:\\Users\\Public\\PSS 2024"

## Visual Studio Code{.smaller}
![](images/VSCODEfolder%20select.jpg){fig-align="center" height=500}


Select that folder and click 'open'.


:::{.notes}
in the quarto document there's a lot of \\ in the address, that's the old filepath problem again!
:::

## Visual Studio Code{.smaller}

If it's the first time you've selected or opened this folder (or a subfolder of it), you'll see a message asking if you 'Trust the authors of the folder'.

![](images/VSCODEauthor_trust.jpg){fig-align="center" height=500}

. . .

Click 'Yes, I trust the authors' (because you do, right?).

## Visual Studio Code{.smaller}

 - You should now see the 'explorer' view in the activity bar on the left of the window, and a list of files and folders in the 'PSS 2024' folder.
 - You need to go to brightspace and download the file called 'example.qmd' and save it in the 'PSS 2024' folder.
 - Take your time, and let me know if you need any help.
 - Once you've saved the file into the folder, you should see it in the 'explorer' view in VScode.

. . .

Lets open that file and introduce you to your new best friend, the quarto markdown document!


# Quarto

## What is quarto? {.smaller}
 - Quarto is a piece of software that works "under the hood" in your IDE (VScode in our case) to allow you to:
    - Write documents in a simple, plain text format.
    - Format those documents using a simple syntax.
    - Include code (for data analysis for example) and the output of that code in your documents.
    - Include references and citations in your documents.
    - Include tables and images in your documents.
    - And much more!



:::{.notes}
You can mention pandoc, rmarkdown etc here, but this isn't a history lesson. 
:::



## Why am Quarto?{.smaller}
 - Quarto was developed (essentially) by the scientific community to allow researchers to take advantage of modern work flow:
    - To allow remove the tedium of working formatting documents by hand.
    - To not have to care about what the document will look like while you're writing.
    - To allow you to analyse your data and write about it in the same place.

. . . 

In the links for this presentation you'll find wider info about quarto, but for now, let's just get you started.



## Quarto Documents{.smaller}
Quarto documents are essentially `plain text` with some extra `syntax` added in to tell the computer how to format the document.

 - `Plain Text` is just that, plain. It's like the text you type in a text message, or an email without any formatting.
 - `Syntax` is the set of rules that govern how the computer will interpret various symbols that you put into the `plain text` to tell *the computer how to format it*.

. . . 
  
There are [lots of resources to help you learn the quarto syntax](https://quarto.org/docs/get-started/hello/vscode.html), and indeed there are lots of resources to help you learn the syntax of other similar tools, but we're going to focus on the basics for now.


## Quarto Documents{.smaller}
### The Basics  
 - Quarto documents are written in `markdown` (a type of `plain text`).
 - They have a `.qmd` file extension (but other kinds of files like `.ipynb` and `.rmd` can be used too).
 - They have a `yaml` header at the top of the file (which is where you tell the computer how to format the document).
     - It's where we put things like the author and title, but also the format that we want the document to 'render to'.
 - They use really simple symbols to indicate things like headings, lists, italics, bold, images, and links. 


## Quarto Documents{.smaller}

### markdown basics : Headings. 

#### Headings are indicated by a `#` symbol at the start of a line.
```{markdown} 
---
title: "example.qmd"
author: "pfft, some nerd"
---

# This is a level 1 heading
It's at the top of the document and is the largest heading.

## This is a level 2 heading
It's a little smaller and is used to indicate a new section.
 
### This is a level 3 heading
It's a little smaller again and is used to indicate a new subsection.
```



# This is a level 1 heading
It's at the top of the document and is the largest heading.

## This is a level 2 heading
It's a little smaller and is used to indicate a new section.

### This is a level 3 heading
It's a little smaller again and is used to indicate a new subsection. 


## Quarto Documents{.smaller}
### markdown basics : Headings. 


```{markdown} 
---
title: "example.qmd"
author: "pfft, some nerd"
---

# This is a level 1 heading
It's at the top of the document and is the largest heading.

## This is a level 2 heading
It's a little smaller and is used to indicate a new section.
 
### This is a level 3 heading
It's a little smaller again and is used to indicate a new subsection.
```


::: {.notes}
Say that we're ignoring lines 1-4, call out line 6, and then walk through the rest of the example.
:::


## Quarto Documents{.smaller}
### markdown basics : Bold and Italics.
#### Markdown uses `*` (the star symbol, shift+8) and `_` (the underline symbol, shift+-) to indicate bold and italics.

```{markdown}

### Italics
*This is in italics*

_This is also in italics_

### Bold
**This is in bold**

__This is also in bold__

### Bold and Italics
***This is in bold and italics***


```


## Quarto Documents{.smaller}


###  Italics
*This is in italics*

_This is also in italics_

### Bold
**This is in bold**

__This is also in bold__

### Bold and Italics
***This is in bold and italics***

## Quarto Documents{.smaller}
### markdown basics : Lists

 - #### Markdown supports both numbered (ordered) and unnumbered (unordered) lists. 
 - #### It's straightforward to create them using numbers for ordered lists and dashes or asterisks for unordered lists.

```{markdown}
### Numbered Lists
1. First item
2. Second item
    - Sub item
3. Third item

### Unnumbered Lists
- First item
- Second item
    1. Sub item
    2. Sub item 2
- Third item
```

::: {.notes}
Don't forget to highlight that you can mix and match the two types of lists
:::

## Quarto Documents{.smaller}
### markdown basics : Lists


### Numbered Lists
1. First item
2. Second item
    - Sub item
3. Third item

### Unnumbered Lists
- First item
- Second item
    1. Sub item
    2. Sub item 2
*  Third item

::: {.notes}
For the numbered lists, each item starts with a number followed by a dot. Markdown automatically numbers the items correctly, even if you use `1.` for all items. For unnumbered lists, you can use either `-` or `*` to start each item. The choice between dashes and asterisks is purely stylistic.
:::

## Quarto Documents{.smaller}
### markdown basics : Links

 - #### Creating hyperlinks in Markdown is simple. 
 - #### You enclose the link text in square brackets and the URL in parentheses immediately after the text.

```{markdown}
[Quarto](https://quarto.org)
```

## Quarto Documents{.smaller}
### markdown basics : Links

### Example Links
[Quarto](https://quarto.org)

::: {.notes}
When creating links, ensure there is no space between the closing square bracket and the opening parenthesis. This syntax will render the text in the square brackets as a clickable hyperlink pointing to the URL in the parentheses.
:::


## Quarto Documents{.smaller}
### markdown basics : Recap

```{markdown}
---
title: "example.qmd"
author: "pfft, some nerd"
---
<<I've skipped the level 1 heading>>

## This is a level 2 heading

*This text is in italics*
**This text is in bold**
***This text is in bold and italics***

### Numbered Lists
1. First item
2. Second item
    - Sub item

### Unnumbered Lists
- First item
- Second item
    1. Sub item
    2. Sub item 2

[Link to the Quarto website](https://quarto.org)

```

## Quarto Practice{.smaller}

OK that's the basics of markdown, and the basics of quarto, but it's a lot. Let's take a few minutes to practice.

Rather than editing the `example.qmd` file, let's create a new file to practice in.

 - If you hover over the 'explorer' area on the left of the window, you'll see a little icon that looks like a piece of paper with a plus sign on it. Click on that to create a new file.
 - Type `intentions.qmd` into the box that pops up and press enter. (Yay!! You now know how to create a new file in VScode!)

## Quarto Practice{.smaller}

 - In this new document using the markdown syntax we've just learned, write a few paragraphs about your intentions for the summer school.
    1. What do you hope to learn?
    2. Is there a particular project you might use this knowledge for?
    3. What are you most excited about?
    4. What are you most nervous about?
    5. Look around for a website that you think might be useful to you, and include a link to it in your document.

. . . 

Unless you share it no one else will be able to see that file, so don't worry about what you write. 

When you want to save what you've written, just press `ctrl+s` (or `cmd+s` on a mac). 


## Quarto: Rendering and Previewing{.smaller}

 - The computer uses the `syntax` to format the `plain text` into a `pretty document`.
 - This process is called `rendering` (you've heard me say that already).
 - You can `render` your document at any time to see what it looks like.
 - You can also `preview` your document in a separate window to see what it looks like. 

## Quarto: Rendering and Previewing{.smaller}
This is the first time we'll use the `terminal` in VScode, and it's really simple. 
 - Click on the `terminal` icon in the bar along the top of the VScode window.
 - Click 'new terminal' from the menu that pops up.

. . . 
 
You should see a new panel open at the bottom of the window. This is the terminal.

![](images/VSCODEterminal_isolated.png){fig-align="center"}

## Rendering and Previewing{.smaller}
And now we just need to use the `terminal` to tell Quarto to `render` our document. 

Now these commands can be really *really* complex, so you're really going to have to pay attention here. 

## Rendering and Previewing{.smaller}
Seriously, it's really complex.

## Rendering and Previewing{.smaller}
Actually... maybe you're not ready for this yet.


## Rendering and Previewing{.smaller}

. . . 

Oh OK. 

 - It's `quarto render` followed by the (full)name of the file you want to render 
     - (in this case `intentions.qmd`).

```{bash}
> quarto render intentions.qmd
```

. . . 

You OK? 

## Rendering and Previewing{.smaller}

. . . 

You can also `preview` your document in a separate window to see what it looks like. 

```{bash}
> quarto preview intentions.qmd
```

. . .

 - Every time you save the document, the preview will update to show you what the document looks like.
 - Do that now, try to make a change to your document, save it (ctrl+s), and then see how the preview updates to show you the change.

# Well Done!

## Summary{.smaller}
 - We've introduced you to the tools you'll be using to write your documents and handle your files and folders.
 - We've introduced you to the basics of VScode.
 - We've introduced you to the basics of markdown and quarto.
 - We've introduced you to the basics of rendering and previewing your documents.

## And you nailed it!{.smaller}
 - You've created a new file in VScode.
 - You've written a document in markdown.
 - You've rendered and previewed your document.

## Quiz time!{.smaller}
 If you go to the brightspace site (we've added you all to the course), you'll find a quiz there that will help you to remember what we've covered in this session. 

 The quiz is called 'Session 0.0' and it's just a few questions to help you remember what we've covered today.

**YOU ARE NOT BEING GRADED ON THIS QUIZ!** 

It's just another form of practice to help you remember what we've covered today.

## Next bits{.smaller}
 - Before you take a well deserved break, make another new file in VScode. 
 - Call this file `exemplar.qmd`.
 - This is where you'll be working in the next session after the break. 
 - All you need to do in this file is:
     1. Write a level 1 heading with the name of someone you really admire (preferably someone you can research online, so not a family member).
     2. Write a list of 5 things you admire about them.
     3. Include a link to a website about them.

## And that's it!{.smaller}
Thanks for your attention, and I'll see you in the next session.

![](images/Kev%20aged%2017.jpg){fig-align="center" height=300}


# Links
 - [Quarto](https://quarto.org)
 - [Getting Started with Quarto](https://quarto.org/docs/get-started/)
 - [VS code quarto overview](https://quarto.org/docs/tools/vscode.html)

# References
::: {#refs}

:::
