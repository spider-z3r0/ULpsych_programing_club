---
title: "Session 3.0"
subtitle: "It's R time to shine!"
format: 
   revealjs:
      incremental: true
      theme: solarized
editor: "visual"
bibliography: references.bib
---


# Welcome back!! {.smaller}

 - Over the last few days we've introduced you to quarto and markdown
 - We've shown you quarto markdown and jupyter notebooks and how you can write code and text in the same document
 - And we've taken you through some programming basics like
   - Variables (saving data under a name you can use later)
   - Data types (like `strings`, `integers`, `floats`, and `booleans`)
   - Functions ( a way to `define` a set of instructions and run it multiple times)
   - Control structures (like `loops` and `if` statements)
   - Data structures (like `lists`, `dictionaries`, and `DataFrames`)
   - And more

# Recap quiz {.smaller}

 - Before we get started, let's do a quick recap quiz to see how much you remember
 - This quiz is a little longer than the previous ones, but it's still untimed
 - And getting things wrong will still remind you of the correct answer
 - It's up in Day 3 on Brightspace

# Today's plan {.smaller}

 - Today we're going to introduce you to `R`, but we're just going to be looking at how R does things you've already seen in Python
 - We'll be looking at
   - Variables
   - Data types
   - Functions
   - Control structures
   - Data structures
 - But we'll also be getting you to work in quarto markdown instead of jupyter notebooks
 - And we'll be talking you through more about best practices for setting up your projects

# Setting up your project {.smaller}

 - Over the years various researchers have come up with best practices for setting up your projects
 - And they wrapped them up in a set of guidelines called the 'Best Practices for Scientific Computing'
 - But they were too big and no one followed them...
 - So they were distilled down into a set of guidelines called the 'Good Enough Practices for Scientific Computing' [@wilson2017good]

# Good Enough Practices for Scientific Computing {.smaller}
 
 - I really suggest you read the paper (it's up on Brightspace)
 - There's a lot in it that may not be relevant to you now, but the principles are good to know
 - The main points are
   - Have a clear project structure (set up your folders and files in a way that makes sense)
   - Write code for humans, not computers (use comments and variable names that make sense)
   - Automate repetitive tasks (use functions and loops)
   - Use version control (there's tools like git that can help you keep track of changes to your writing and code)
   - Document everything (write down what you did and why you did it)
   - Collaborate (work with others and share your work)

# Good Enough Practices for Scientific Computing {.smaller}

 - We can't cover all those points, and honestly, you'll learn them better by doing them and making mistakes
 - But things like setting up your projects in a way that makes sense, and writing code for humans are things we can help you with
 - Before jumping into R, we're going to talk about how to set up your projects in a way that makes sense
 - This means not only setting up your folders and files in a way that makes sense, but also setting up your code thoughtfully
 - Installing the things you'll need to run your `R` code
 - But first, lets practice setting up your folders

# Setting up your folders {.smaller}

 - When you start a new project, you should set up a folder for it, and then set up subfolders for different parts of your project
 - For example, you might have a folder for your data, a folder for your code, a folder for your results, and a folder for your writing
 - This makes it easier for you to work with things like `paths` and `relative paths` within and across your projects
   - It also makes it easier for you to share your work with others
   - We're going to get you to set up a folder structure for your project now
 - Using what you learned about the `explorer` pane on the left of VSCode, create a new folder called "Day 3" in the folder you've been working in all week

# Setting up your folders {.smaller}

 - Inside the "Day 3" folder, create the following subfolders
   - "data"
   - "src"
   - "output"
 - Copy the movies_df.csv file from yesterday into the "data" folder
 - And in the "src" folder, create a new file called "intro.qmd"

# Setting up your code {.smaller}

 - In python we told you that there are packages/libraries/modules that you can use to 'go beyond' the basic functionality of python
 - These are things like `pathlib`, `pandas`, `numpy`, `matplotlib`
 - The same thing exists in `R`, but they're called `packages` or `libraries`
 - In both languages you need to install the packages before you can `import` them into your code
 - We didn't show you how to do that in python yet, but we're going to show you how to do it in `R` now


# The R terminal {.smaller}

 - On Day 0 we showeded you the terminal in VSCode
 - It's in the bottom panel of the window
 - This is a place where you can run code (commands) directly
 - On the computers you're using the terminal is running something called PowerShell by default
 - This is the windows 'shell'
 - If you were on a mac, it would be running something called `bash` which is the mac 'shell'
 - you can also run `python` and `R` code in the terminal by typing `python` or `R` and hitting enter

# The R terminal {.smaller}

 - In VSCodes, use your mouse to make the terminal bigger
 - Then type `R` and hit enter and watch how the terminal changes
 - You should see something like this

![R terminal](images/r_terminal.jpg)


# The R terminal {.smaller}
 
 - You actually already know some R code
 - Try typing `print("Hello World!")` and hitting enter in the terminal
 - You should see `Hello World!` printed out with a `[1]` in front of it
 - R and Python are very similar in a lot of ways and you'll see that as we go through the day
 - As you can see from the instructions on the screen, you can type `q()` to quit the R terminal
 - It will ask if you want to save your workspace image, just type `y` and hit enter
 - So try quitting the R terminal, then type `R` and hit enter to start it again and print `Hello World!` again

# Installing packages in R {.smaller}

 - To install packages in R, you need the R terminal open because installing packages is a command you have to run in R directly. 
 - To install a package in R, you use the `install.packages()` function
 - And you pass the name of the package you want to install as a `string` to the function
 - In order to work with quarto and R you need to install the `quarto` package (which is different from the `quarto` software)
 - So in the R terminal, type `install.packages("quarto")` and hit enter
   - This will install the quarto package on your computer, whatch the terminal to see what happens
 - You should also install the 'rmarkdown' package by typing `install.packages("rmarkdown")` and hitting enter

# Installing packages in R {.smaller}

 - Ok, you now have the packages installed that we need for this session, but there are others
    - 'tidyverse' (a collection of packages that make working with data easier)
    - 'ggplot2' (a package for making plots)
    - 'psych' (a package for doing some basic statistics)
    - 'lavaan' (a package for doing structural equation modeling)
 - Depending on your project you'll use some or all of these, we'll look at some of them throughout the day. 
 - But for now you can `quit` the R terminal by typing `q()` and hitting enter (and saving your workspace image)


# Setting up your `.qmd` file {.smaller}

 - Now that you've installed the quarto and rmarkdown packages, you can start working in R
 - Open the "intro.qmd" file you created in the "src" folder
 - Remember that we can include `yaml`, `markdown`, and code in a .qmd file
 - We're going to start by setting a simple yaml header

. . . 

```{{yaml}}
---
title: "intro to R"
author: "Your Name"
engine: knitr
---
```

# Setting up your `.qmd` file {.smaller}

 - This is a really simple yaml header
 - The `title` is the title of your document
 - The `author` is your name
 - The `engine` is the engine that will run your code 
 - We're using `knitr` because it's the engine that will run R code
 - If we were using python code we would use `jupyter` as the engine
 - Now I want you to add some markdown to your file starting with a level 1 heading
 - Then write a short note about how you feel about learning R

# Markdown recap {.smaller}

 - We took a good look at markdown on Day 0
 - And you've answered questions on it in most of the quizzes 
 - But just to remind you
   - You can use `#` to create headings
   - You can use `-` to create lists
   - You can use `---` to create horizontal rules and to open and close the yaml header
   - You can use `![alt text](path/to/image)` to include images
   - And you use three backticks followed by{languagename} to include code blocks
 - In this session you're going to use headings, plain markdown and code blocks
 
# Markdown example {.smaller}

````{{markdown}}

# How I feel about learning R

Nervous, but excited to never open SPSS again

```{{r}}
#| echo: true
#| eval: true
# This is a cell within a cell, cell-ception!
print("Hello World!")
```
````

# Make notes {.smaller}

 - Before we get into the R code
 - Take a few minutes to make some notes in your "intro.qmd" file
 - Make a new section with a level 1 heading and list what we did so far
   1. Set up a folder structure (Day 3, data, src, output)
   2. Installed the quarto and rmarkdown packages in R
     a. Opened the R terminal
     b. Installed the quarto package with `install.packages("quarto")`
     c. Installed the rmarkdown package with `install.packages("rmarkdown")`
   3. Set up the "intro.qmd" file in the "src" folder
     a. Added a yaml header
     b. Added a level 1 heading 
 - Save your file and we'll move on to the R code

# What you already know in R {.smaller}

 - Believe it or not, learning some python has already taught you a lot about R
 - At the general level, you know about variables, data types, functions, control structures, and data structures
 - And python and R handle these things in very similar ways
 - So we're going to go through some examples of how you can do things in R that you've already seen in python
 - The first thing to note is that comments in R are made with a `#` just like in python
 - And you can use `#` to comment out code in R just like in python
 - Comments really matter!! Don't skimp on them!!

# Strings in R {.smaller}

 - In R, you can create strings by wrapping text in either single or double quotes
 - So the code:
  - ` "Hello World!" ` and ` 'Hello World!' `
  - Will both create a string with the text `Hello World!`
 - And the same reasons for using single or double quotes in python apply in R
 - Like in names that contain apostrophes or when quotes

# print() in R {.smaller}

 - In R, you can print things to the console using the `print()` function
 - So the code:
  - `print("Hello World!")`
  - Will print `Hello World!` to the console
 - So you see that functions in R are called the same way as in python

# Variables in R {.smaller}

 - Just as we can assign some data to a variable in python, we can do the same in R
 - There's actually 2 ways to do this:
   - `variable = data` (just like in python)
   - `variable <- data`(this is the preferred way in R)
  - So the code:
    - `x <- "Hello World!"`
    - Will assign the value `Hello World!` to the variable `x`
  - And the code:
    - `print(x)`
    - Will print `Hello World!` to the console

# First practice {.smaller}

 - In your "intro.qmd" file, add a new section with a level 1 heading
 - Add a code block with the following code
   - `x <- "Hello World!"`
   - `print(x)`
 - Save your file and then we'll try more of the Day 0 quarto commands by getting you to preview your file

# Previewing your file {.smaller}

 - To preview your file, you can use the `quarto preview` command in the terminal
 - But not in the R terminal, in the standard terminal
 - So from the menu at the top of the screen, select `Terminal` and then `New Terminal`
  - This will open a new terminal window at the bottom of the screen
  - You'll see the `directory` you're in and a blinking cursor
  - You can right click on "intro.qmd" in the explorer pane and select `Copy Path`
  - Then type `quarto preview ` and paste the path to your file and hit enter
 - Cross all the fingers and toes and watch what happens

# Previewing your file {.smaller}

 - If you see the preview of your file in your browser, then you're good to go
 - If you see an error message, then you'll need to read it and we'll help you fix 
 - Just start by making sure that your code looks like this

. . .

```{{r}}
# Making a string
x <- "Hello World!"
# Printing the string
print(x)
```

# Previewing your file {.smaller}

 - You can leave that preview running and it will update everytime you save your file. 
 - The preview won't have all the formatting that you'll see when you full render the file
 - But it's a good way to check that your code is working and that your general formatting is correct
 - Add a new section to the file, maybe with a level 2 heading about previewing your file
   - Remember that the command is `quarto preview` and then the path to your file (you can copy the path from the explorer pane)
 - Save your file, take a look at the preview, and then we'll move on to data types

. . . 

Oh! 

 - You can cancel the preview by hitting `ctrl + c` while you're in the terminal

# More with strings {.smaller}

 - We can `concatenate` strings in R, but it's a little different than in python
 - In R, you use the `paste()` function to concatenate strings
 - Like so:

. . . 
```{r}
#| echo: true
#| eval: true

# Making a string
x <- "Hello"
y <- "World!"
# Concatenating the strings
z <- paste(x, y)
# Printing the concatenated string
print(z)
```







# References

::: {#refs}
:::





