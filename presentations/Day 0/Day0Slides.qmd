---
title: "Session 0 - Introductions all round"
format: 
   revealjs:
      incremental: true
editor: "visual"
jupyter: pss
bibliography: references.bib
---


# Welcome!

My name is Kev O Malley, and I'm the nerd who'll be accompanying you through this material.

<div align="center">
  <img src="images/rain_hill.jpg" alt="description of image" height="500px"/>
</div>


## Acknowledgements
This content is building on some other really amazing work by some really amazing people, and I'll be sure to give them credit as we go along, but just to note that this material is heavily inspired by: 

- [The python crash course](https://nostarch.com/python-crash-course-3rd-edition) [@MatthesPython2022]
- [Pandas for everyone](https://www.apress.com/gp/book/9781484259618) [@chen2017pandas]
    - There's a second edition of this, I haven't read it, but I'm sure it's great!
- [Harvard's CS50](https://cs50.harvard.edu/x/2022/) [@CS50Scratch2020]
    - This is free online and it's genuinely excellent, they also have intros to python and r which will go deeper than this course.
- A deep and abiding hatred of SPSS and MS Word (excel is great though, don't @ me)



## In this session, we're going to:

1.  Give you an overview of the course:
    -   What we're going to be doing (learning together).
    -   Why we're doing it (to empower each other).
    -   What you can expect to get out of it (a sense of agency and efficacy).

## In this session, we're going to:
2.  Introduce you to the tools we're going to be using (and mention some of the alternatives).
    -   Quarto (as a tool for writing documents, reports, and papers).
    -   Python (as a tool for doing data analysis and visualisation).
    -   R (as an alternative to Python for doing data analysis and visualisation).
    -   Git (as a tool for collaboration, managing your documents and code)

## In this session, we're going to:
3.  Accompany you through the process of producing your first documents using these tools.



# But first...

Let's address the elephant(s) in the room.

When you think of people who work with computer programming, you may think of people that look like this...

<div align="center">
  <img src="images/Dexter.jpg" alt="description of image" height="500px"/>
</div>


---

Or maybe like this

<div align="center">
  <img src="images/Kev aged 17.jpg" alt="description of image" height="500px"/>
</div>


## But in reality...

These tools were developed by, and are used by, people from all walks of life

## AND ALWAYS HAVE BEEN

![](images/Grace_Hopper_Team.jpg)

##  Inspirations

- 'The Great Being saith: Regard [humanity] as a mine rich in gems of inestimable value. Education can, alone, cause it to reveal its treasures, and enable mankind to benefit therefrom.'
[@bahai_maqsud]

 - "We are what we *repeatedly do*. Excellence, therefore, is not an act, but a _**habit**_.”
[@durant1933story, paraphrasing Aristotle]

---

# You're very smart, but...

 - ## You're here to **learn**. 
 - ## Not to be an expert. 
 - ## So relax and enjoy the process of learning. 

---

# A new way of working - Let the computer do the boring stuff

## A brief history of documents

-   In the beginning, there was the cave. 
    -   And the cave was good, but it was also cold and dark, and really heavy to carry around.
<div>
    <img src="images/cave.jpg" alt="description of image" height="500px"/>
</div>

## A brief history of documents
-  Then there was the scroll, of papyrus or linen or hide. 
    -   And the scroll was good, but it was also really fragile and hard to write on (and really heavy to carry around).
<div>
    <img src="images/scroll.jpg" alt="description of image" height="500px"/>
</div>

## A brief history of documents
-  Then there was the codex, of parchment or paper. 
    -   And the codex was good, illumined with beautiful art by monks and nuns (and really heavy to carry around). 
<div>
    <img src="images\manuscript.jpeg" alt="description of image" height="500px"/>
</div>

## A brief history of documents
-  Then there was the printing press, and the typesetter. 
    -   And the documents were good, but the machinery was hard to use requiring significant expertise (and really heavy to carry around).
<div>
    <img src="images/press.jpg" alt="description of image" height="500px"/>
</div>

## A brief history of documents
-  Then there was the computer, and the word processor. 
    -   And the documents were good, but the software was hard to use and required significant expertise (and really heavy to carry around).
<div>
    <img src="images/word.jpg" alt="description of image" height="500px"/>
</div>

## A brief history of documents
-  Then there was the internet, and the web browser. 
    -   And the documents were good, but the text was difficult to parse and required significant expertise (but the documents were really easy to carry around... maybe too easy).
<div>
    <img src="images/browser.jpg" alt="description of image" height="500px"/>
</div>

## A brief history of documents
With each of these advances, the process of creating and sharing documents has become easier and more accessible, but the tools have also become more complex and required more expertise to use effectively, meaning that people who work with documents had to have more and more training and experience to be able to use them effectively.

But there was another way...

## A brief history of documents
While writers and researchers were using the tools of the printer and the graphic designer, computer programmers were developing tools to help them write and share their work more effectively. 

- Tools like the IDE (integrated development environment) for writing text. 
- Tools like Markdown, quarto, and restructured text to allow you to just write and not worry about the formatting.
- Tools like the version control system for sharing and collaborating on documents (without having to email them back and forth).


## You're here to learn these tools

![](images/brent.jpg){fig-align="center" height=300}


# But why?


## Running Code with a Mouse
- Every click and action with a mouse on a computer triggers underlying code.
- Simple actions like opening a file or copying text are coded instructions being executed.


## Repetition and Efficiency
- Manually repeating an action with a mouse means running the same set of code multiple times.
- This approach can be inefficient and time-consuming for repetitive tasks.


## Writing Code for Automation
- By **writing** code instead, you can specify the instructions once, including how many times an action should be repeated.
- This allows for automation of repetitive tasks, saving time and reducing errors.


## Leveraging Existing Code
- You don’t always have to write code from scratch; you can use code that others have written.
- Libraries and scripts **created by others** can be applied to your specific needs, making complex operations simpler and more efficient.



## Empowerment through Coding
- Learning to write or modify code gives you control over your computer tasks.
- It transforms repetitive manual actions into efficient automated processes, empowering you to work smarter, not harder.



## So, what are we going to be doing?
 - Day 0: Introductions all round - getting you comfortable with writing in quarto using vscode (there's no code today, just writing).
 - Day 1: Introduction to Python - getting you comfortable with the basics of python (where you'll learn why yesterday was 'Day 0').
 - Day 2: Python functions and libraries - getting you comfortable with using python to do data analysis and visualisation.
 - Day 3: Environment and version control - getting you comfortable with using git and github to manage your projects (code and documents).
 - Day 4: et cetera - intro to R, some example projects with Python and R, and a look at some other tools and resources.


# OK Kev... Get on with it!

OK OK! Let's get you started by introducing you to vscode.

## Visual Studio Code

-   An IDE (integrated development environment) is a program that allows you to write, run, and debug code all in one place.
    - It 'integrates' all the tools you need to write code into one program.
-   But code is just a form of text, and so an IDE is also a text editor.
    -   It allows you to write and edit text, and then, where appropriate, run that text as code, or run code on that text (I made this very presentation in VScode!).

## Visual Studio Code

-   Visual Studio Code (VS Code) is a free, open-source code editor developed by Microsoft.
-   It is available for Windows, macOS, and Linux.
-   It is highly customisable and has a large number of extensions available to add functionality.
    - For example, it has extensions that allow you to view excel style data sets *in the same program* as the document you're writing text in
    - So no more switching between excel and word (unless... you want to... you do you).

## Visual Studio Code

Open up VS Code and let's take a look around.

![](images/VSCODEoverview.png){fig-align="center" height=700}








# Links
 - [Quarto](https://quarto.org)
 - [VS code quarto overview](https://quarto.org/docs/tools/vscode.html)

# References
::: {#refs}
:::
